// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/vendor_ruleset_collection.proto

package cloudarmor

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Vendor ruleset collection initially provided by Vendor
// This represents the initial set of data provided by the Vendor.
// For further details, please refer to shared(Google and Imperva) design doc:
// go/imperva-google-mgdrules-integration
type VendorRulesetCollection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Next ID: 4
	// Unique ID associated with the ruleset collection
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Metadata for the ruleset
	RulesetMetadata *VendorRulesetCollection_RulesetMetadata `protobuf:"bytes,2,opt,name=ruleset_metadata,json=rulesetMetadata,proto3" json:"ruleset_metadata,omitempty"`
	// Collection of vendor rulesets
	RuleSets      []*VendorRuleSet `protobuf:"bytes,3,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorRulesetCollection) Reset() {
	*x = VendorRulesetCollection{}
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorRulesetCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRulesetCollection) ProtoMessage() {}

func (x *VendorRulesetCollection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRulesetCollection.ProtoReflect.Descriptor instead.
func (*VendorRulesetCollection) Descriptor() ([]byte, []int) {
	return file_proto_vendor_ruleset_collection_proto_rawDescGZIP(), []int{0}
}

func (x *VendorRulesetCollection) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VendorRulesetCollection) GetRulesetMetadata() *VendorRulesetCollection_RulesetMetadata {
	if x != nil {
		return x.RulesetMetadata
	}
	return nil
}

func (x *VendorRulesetCollection) GetRuleSets() []*VendorRuleSet {
	if x != nil {
		return x.RuleSets
	}
	return nil
}

// Vendor rulesets containing rules for specific category, e.g. sqli, xss
type VendorRuleSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Next ID: 7
	// Name of the ruleset provided by Vendor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the ruleset provided by Vendor, if any.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Category of the ruleset, e.g. SQLi, XSS
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	// Release notes corresponding to the rulesets
	ChangeLog *VendorRuleSet_ChangeLog `protobuf:"bytes,4,opt,name=change_log,json=changeLog,proto3" json:"change_log,omitempty"`
	// Transformations should be applied sequentially to the input request
	// before evaluating CEL Expression
	// Rule shall be evaluated only once all the transformations were applied.
	Transformations []string `protobuf:"bytes,5,rep,name=transformations,proto3" json:"transformations,omitempty"`
	// collection of rules under the ruleset
	Rules         []*VendorRuleSet_VendorRule `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorRuleSet) Reset() {
	*x = VendorRuleSet{}
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorRuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRuleSet) ProtoMessage() {}

func (x *VendorRuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRuleSet.ProtoReflect.Descriptor instead.
func (*VendorRuleSet) Descriptor() ([]byte, []int) {
	return file_proto_vendor_ruleset_collection_proto_rawDescGZIP(), []int{1}
}

func (x *VendorRuleSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorRuleSet) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VendorRuleSet) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *VendorRuleSet) GetChangeLog() *VendorRuleSet_ChangeLog {
	if x != nil {
		return x.ChangeLog
	}
	return nil
}

func (x *VendorRuleSet) GetTransformations() []string {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *VendorRuleSet) GetRules() []*VendorRuleSet_VendorRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Metadata shared across Rulesets
type VendorRulesetCollection_RulesetMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Next ID: 6
	// ruleset creation date
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// ruleset modification date
	UpdationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updation_date,json=updationDate,proto3" json:"updation_date,omitempty"`
	// Name of the owner of the rulesets, e.g.   Imperva
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// A description of the ruleset's purpose
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Encryption key identifier
	EncryptionkeyId string `protobuf:"bytes,5,opt,name=encryptionkey_id,json=encryptionkeyId,proto3" json:"encryptionkey_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VendorRulesetCollection_RulesetMetadata) Reset() {
	*x = VendorRulesetCollection_RulesetMetadata{}
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorRulesetCollection_RulesetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRulesetCollection_RulesetMetadata) ProtoMessage() {}

func (x *VendorRulesetCollection_RulesetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRulesetCollection_RulesetMetadata.ProtoReflect.Descriptor instead.
func (*VendorRulesetCollection_RulesetMetadata) Descriptor() ([]byte, []int) {
	return file_proto_vendor_ruleset_collection_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VendorRulesetCollection_RulesetMetadata) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *VendorRulesetCollection_RulesetMetadata) GetUpdationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdationDate
	}
	return nil
}

func (x *VendorRulesetCollection_RulesetMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *VendorRulesetCollection_RulesetMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorRulesetCollection_RulesetMetadata) GetEncryptionkeyId() string {
	if x != nil {
		return x.EncryptionkeyId
	}
	return ""
}

// ChangeLog for the ruleset
type VendorRuleSet_ChangeLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This will be used to surface changelog information through
	// documentation
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// this determines whether the ruleset description should be public
	// e.g. Included in the release notes
	AlwaysPublic bool `protobuf:"varint,2,opt,name=always_public,json=alwaysPublic,proto3" json:"always_public,omitempty"`
	// this is set if it should be included in a CVE release
	UseForCve     bool `protobuf:"varint,3,opt,name=use_for_cve,json=useForCve,proto3" json:"use_for_cve,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorRuleSet_ChangeLog) Reset() {
	*x = VendorRuleSet_ChangeLog{}
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorRuleSet_ChangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRuleSet_ChangeLog) ProtoMessage() {}

func (x *VendorRuleSet_ChangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRuleSet_ChangeLog.ProtoReflect.Descriptor instead.
func (*VendorRuleSet_ChangeLog) Descriptor() ([]byte, []int) {
	return file_proto_vendor_ruleset_collection_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VendorRuleSet_ChangeLog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VendorRuleSet_ChangeLog) GetAlwaysPublic() bool {
	if x != nil {
		return x.AlwaysPublic
	}
	return false
}

func (x *VendorRuleSet_ChangeLog) GetUseForCve() bool {
	if x != nil {
		return x.UseForCve
	}
	return false
}

// Rule from the Vendor ruleset.
// It would only exist in the initial set of rules provided by the Vendor.
type VendorRuleSet_VendorRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Next ID: 7
	// Unique ID associated with each rule
	// For incremental updates, the rule ID remains unchanged but follows a
	// versioning format. Example: id191190.0 to id191190.1
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// CEL expression
	// Defines the rule logic in CEL string format using Cloud Armor (CA)
	// attributes.
	CelExpression string `protobuf:"bytes,2,opt,name=cel_expression,json=celExpression,proto3" json:"cel_expression,omitempty"`
	// Array of Key value pairs of tags and additional info associated
	// with the tag separated by ':'
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// Curl commands that would generate the matching expression for rule
	E2ETestCommand []string `protobuf:"bytes,4,rep,name=e2e_test_command,json=e2eTestCommand,proto3" json:"e2e_test_command,omitempty"`
	// By default, it would be false.
	// If true, the rule shall only be evaluated if enabled by customers.
	OptIn         bool `protobuf:"varint,6,opt,name=opt_in,json=optIn,proto3" json:"opt_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorRuleSet_VendorRule) Reset() {
	*x = VendorRuleSet_VendorRule{}
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorRuleSet_VendorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorRuleSet_VendorRule) ProtoMessage() {}

func (x *VendorRuleSet_VendorRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vendor_ruleset_collection_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorRuleSet_VendorRule.ProtoReflect.Descriptor instead.
func (*VendorRuleSet_VendorRule) Descriptor() ([]byte, []int) {
	return file_proto_vendor_ruleset_collection_proto_rawDescGZIP(), []int{1, 1}
}

func (x *VendorRuleSet_VendorRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VendorRuleSet_VendorRule) GetCelExpression() string {
	if x != nil {
		return x.CelExpression
	}
	return ""
}

func (x *VendorRuleSet_VendorRule) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VendorRuleSet_VendorRule) GetE2ETestCommand() []string {
	if x != nil {
		return x.E2ETestCommand
	}
	return nil
}

func (x *VendorRuleSet_VendorRule) GetOptIn() bool {
	if x != nil {
		return x.OptIn
	}
	return false
}

var File_proto_vendor_ruleset_collection_proto protoreflect.FileDescriptor

const file_proto_vendor_ruleset_collection_proto_rawDesc = "" +
	"\n" +
	"%proto/vendor_ruleset_collection.proto\x12\x10cloudarmor.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xca\x03\n" +
	"\x17VendorRulesetCollection\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12d\n" +
	"\x10ruleset_metadata\x18\x02 \x01(\v29.cloudarmor.proto.VendorRulesetCollection.RulesetMetadataR\x0frulesetMetadata\x12<\n" +
	"\trule_sets\x18\x03 \x03(\v2\x1f.cloudarmor.proto.VendorRuleSetR\bruleSets\x1a\xf6\x01\n" +
	"\x0fRulesetMetadata\x12?\n" +
	"\rcreation_date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationDate\x12?\n" +
	"\rupdation_date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\fupdationDate\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12)\n" +
	"\x10encryptionkey_id\x18\x05 \x01(\tR\x0fencryptionkeyId\"\xa4\x04\n" +
	"\rVendorRuleSet\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1a\n" +
	"\bcategory\x18\x03 \x01(\tR\bcategory\x12H\n" +
	"\n" +
	"change_log\x18\x04 \x01(\v2).cloudarmor.proto.VendorRuleSet.ChangeLogR\tchangeLog\x12(\n" +
	"\x0ftransformations\x18\x05 \x03(\tR\x0ftransformations\x12@\n" +
	"\x05rules\x18\x06 \x03(\v2*.cloudarmor.proto.VendorRuleSet.VendorRuleR\x05rules\x1ar\n" +
	"\tChangeLog\x12 \n" +
	"\vdescription\x18\x01 \x01(\tR\vdescription\x12#\n" +
	"\ralways_public\x18\x02 \x01(\bR\falwaysPublic\x12\x1e\n" +
	"\vuse_for_cve\x18\x03 \x01(\bR\tuseForCve\x1a\x9e\x01\n" +
	"\n" +
	"VendorRule\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0ecel_expression\x18\x02 \x01(\tR\rcelExpression\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tags\x12(\n" +
	"\x10e2e_test_command\x18\x04 \x03(\tR\x0ee2eTestCommand\x12\x15\n" +
	"\x06opt_in\x18\x06 \x01(\bR\x05optInJ\x04\b\x05\x10\x06B<Z:github.com/cel-expr/cloud-armor-rules/pkg/cloudarmor/protob\x06proto3"

var (
	file_proto_vendor_ruleset_collection_proto_rawDescOnce sync.Once
	file_proto_vendor_ruleset_collection_proto_rawDescData []byte
)

func file_proto_vendor_ruleset_collection_proto_rawDescGZIP() []byte {
	file_proto_vendor_ruleset_collection_proto_rawDescOnce.Do(func() {
		file_proto_vendor_ruleset_collection_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_vendor_ruleset_collection_proto_rawDesc), len(file_proto_vendor_ruleset_collection_proto_rawDesc)))
	})
	return file_proto_vendor_ruleset_collection_proto_rawDescData
}

var file_proto_vendor_ruleset_collection_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_vendor_ruleset_collection_proto_goTypes = []any{
	(*VendorRulesetCollection)(nil),                 // 0: cloudarmor.proto.VendorRulesetCollection
	(*VendorRuleSet)(nil),                           // 1: cloudarmor.proto.VendorRuleSet
	(*VendorRulesetCollection_RulesetMetadata)(nil), // 2: cloudarmor.proto.VendorRulesetCollection.RulesetMetadata
	(*VendorRuleSet_ChangeLog)(nil),                 // 3: cloudarmor.proto.VendorRuleSet.ChangeLog
	(*VendorRuleSet_VendorRule)(nil),                // 4: cloudarmor.proto.VendorRuleSet.VendorRule
	(*timestamppb.Timestamp)(nil),                   // 5: google.protobuf.Timestamp
}
var file_proto_vendor_ruleset_collection_proto_depIdxs = []int32{
	2, // 0: cloudarmor.proto.VendorRulesetCollection.ruleset_metadata:type_name -> cloudarmor.proto.VendorRulesetCollection.RulesetMetadata
	1, // 1: cloudarmor.proto.VendorRulesetCollection.rule_sets:type_name -> cloudarmor.proto.VendorRuleSet
	3, // 2: cloudarmor.proto.VendorRuleSet.change_log:type_name -> cloudarmor.proto.VendorRuleSet.ChangeLog
	4, // 3: cloudarmor.proto.VendorRuleSet.rules:type_name -> cloudarmor.proto.VendorRuleSet.VendorRule
	5, // 4: cloudarmor.proto.VendorRulesetCollection.RulesetMetadata.creation_date:type_name -> google.protobuf.Timestamp
	5, // 5: cloudarmor.proto.VendorRulesetCollection.RulesetMetadata.updation_date:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_vendor_ruleset_collection_proto_init() }
func file_proto_vendor_ruleset_collection_proto_init() {
	if File_proto_vendor_ruleset_collection_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_vendor_ruleset_collection_proto_rawDesc), len(file_proto_vendor_ruleset_collection_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_vendor_ruleset_collection_proto_goTypes,
		DependencyIndexes: file_proto_vendor_ruleset_collection_proto_depIdxs,
		MessageInfos:      file_proto_vendor_ruleset_collection_proto_msgTypes,
	}.Build()
	File_proto_vendor_ruleset_collection_proto = out.File
	file_proto_vendor_ruleset_collection_proto_goTypes = nil
	file_proto_vendor_ruleset_collection_proto_depIdxs = nil
}
